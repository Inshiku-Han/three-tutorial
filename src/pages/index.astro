---
import Layout from "../layouts/Layout.astro";
---

<Layout>
    <div id="canvas-container"></div>
</Layout>

<script>
    import * as THREE from "three";
    import { OrbitControls } from "three-stdlib";
    import * as dat from "dat.gui";

    const container = document.querySelector(
        "#canvas-container"
    ) as HTMLDivElement;

    const renderer = new THREE.WebGLRenderer();

    const scene = new THREE.Scene();

    // cemera에는 Perspective와 Orthographic 두가지가 있다.
    const camera = new THREE.PerspectiveCamera(
        45, // field of view(각도)
        window.innerWidth / window.innerHeight, // aspect ratio(비율)
        0.1, // near clipping plane(가까운 평면)
        1000 // far clipping plane(멀리 있는 평면)
        // near부터 far 까지를 렌더링
    );
    // camera의 위치 조정(x, y, z)
    camera.position.set(-10, 30, 30);

    // 궤도. 마우스로 드래그해서 카메라를 이동시킬 수 있다.
    const orbit = new OrbitControls(camera, renderer.domElement);
    orbit.update();

    // 정육면체 오브젝트
    const boxGemometry = new THREE.BoxGeometry();
    const boxMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
    const box = new THREE.Mesh(boxGemometry, boxMaterial);
    scene.add(box);

    // 단면 오브젝트
    const planeGemoetry = new THREE.PlaneGeometry(30, 30);
    const planeMaterial = new THREE.MeshBasicMaterial({
        color: 0xffffff,
        side: THREE.DoubleSide, // 양면처리
    });
    const plane = new THREE.Mesh(planeGemoetry, planeMaterial);
    plane.rotation.x = -0.5 * Math.PI;
    scene.add(plane);

    // 구 오브젝트
    const sphereGeometry = new THREE.SphereGeometry(4, 50, 50);
    // 확인 필요
    const sphereMaterial = new THREE.MeshBasicMaterial({
        color: 0x0000ff,
        wireframe: false,
    });
    const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
    sphere.position.set(-10, 10, 0);
    scene.add(sphere);

    // gltf 로드
    // const loader = new GLTFLoader();
    // loader.load(
    //     "/gltf/out.glb",
    //     (gltf) => scene.add(gltf.scene),
    //     undefined,
    //     (error) => console.error(error)
    // );

    // Development only
    // 축을 시각화하여 보여준다.
    const axesHelper = new THREE.AxesHelper(30);
    scene.add(axesHelper);

    // 그리드를 시각화하여 보여준다.
    const gridHelper = new THREE.GridHelper(30);
    scene.add(gridHelper);

    // props control
    const gui = new dat.GUI();

    const guiOptions = {
        sphereColor: "#ffea00",
        wireframe: false,
        speed: 0.01,
    };

    gui.addColor(guiOptions, "sphereColor").onChange((value) => {
        sphere.material.color.set(value);
    });

    gui.add(guiOptions, "wireframe").onChange((value) => {
        sphere.material.wireframe = value;
    });
    gui.add(guiOptions, "speed", 0, 0.1);

    let step = 0;

    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setAnimationLoop((time) => {
        box.rotation.x = time / 1000;
        box.rotation.y = time / 1000;

        step += guiOptions.speed;
        sphere.position.y = 10 * Math.abs(Math.sin(step));

        renderer.render(scene, camera);
    });

    container.appendChild(renderer.domElement);
</script>
